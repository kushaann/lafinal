
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author kush
 */
public class GUI extends javax.swing.JFrame {
    boolean type = true; //true is road, false is strength
    int algorithmType;
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        AdjInput = new javax.swing.JTextArea();
        TypeButton = new javax.swing.JButton();
        AlgorithmType = new javax.swing.JButton();
        RunButton = new javax.swing.JButton();
        EdgesInput = new javax.swing.JTextField();
        jLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        AdjInput.setColumns(20);
        AdjInput.setRows(5);
        jScrollPane1.setViewportView(AdjInput);

        TypeButton.setText("Road Style");
        TypeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TypeButtonActionPerformed(evt);
            }
        });

        AlgorithmType.setText("Most disconnected to most disconnected");
        AlgorithmType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlgorithmTypeActionPerformed(evt);
            }
        });

        RunButton.setText("Run");
        RunButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunButtonActionPerformed(evt);
            }
        });

        EdgesInput.setText("5");

        jLabel.setText("Edges");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(298, 298, 298)
                                .addComponent(TypeButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(233, 233, 233)
                                .addComponent(AlgorithmType))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(305, 305, 305)
                                .addComponent(RunButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(293, 293, 293)
                                .addComponent(jLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(EdgesInput, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 271, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EdgesInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(TypeButton)
                .addGap(18, 18, 18)
                .addComponent(AlgorithmType)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RunButton)
                .addContainerGap(130, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TypeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TypeButtonActionPerformed
        if(type){
            type = false;
            TypeButton.setText("Strength style");
        }
        else {
            type = true;
            TypeButton.setText("Road Style");
        }
    }//GEN-LAST:event_TypeButtonActionPerformed

    private void AlgorithmTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlgorithmTypeActionPerformed
        if(algorithmType ==0){
            algorithmType++;
            AlgorithmType.setText("Most disconnected to furthest away");
        }
        else if(algorithmType ==1){
            algorithmType++;
            AlgorithmType.setText("Most connected to most disconnected");
        }
        else if(algorithmType ==2){
            algorithmType= 0;
            AlgorithmType.setText("Most disconnected to most disconnected");
        }
        System.out.println(algorithmType);
    }//GEN-LAST:event_AlgorithmTypeActionPerformed

    private void RunButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunButtonActionPerformed
        ArrayList<Double[]> arr = new ArrayList<>();
        ArrayList<String> edgesAdded = new ArrayList<>();
        try {
            File f = new File("data.csv");
            f.createNewFile();
            
            //int v = Integer.parseInt(NodesInput.getText().toString());
            
            String s = AdjInput.getText().toString();
            String[] lines = s.split("\n");
            for(int i = 0; i < lines.length; i++){
                lines[i]= lines[i].substring(0,lines[i].length()-2);
            }
            BufferedWriter bw = new BufferedWriter(new FileWriter("data.csv"));
            for(int i = 0; i < lines.length;i++){
                bw.append(lines[i] + "\n");
            }
            bw.close();
        }
        catch(IOException e){
            e.printStackTrace();
        }
        
        try{
            String exec = "python ";
            if(algorithmType == 0){
                 exec += "fiedlerval.py ";
            }
            else if(algorithmType == 1){
                exec += "furthest.py ";
            }
            else if(algorithmType == 2){
                exec += "inner.py ";
            }
            
            if(type){
                exec += "inv";
            }
            else {
                exec += "reg";
            }
            exec += " " + Integer.parseInt(EdgesInput.getText().toString());
            System.out.println(exec);
            Process p = Runtime.getRuntime().exec(exec);
            BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));
            String s = null;
           
            while((s = br.readLine()) != null){
                System.out.println(s);
                if(s.equals("done"))break;
                String[] temp = s.split(",");
                edgesAdded.add(temp[2]);
                arr.add(new Double[]{Double.parseDouble(temp[0]),Double.parseDouble(temp[1])});
                
            }
            
        }
        catch(IOException e){
            e.printStackTrace();
        }
        try{
            //Process p = Runtime.getRuntime().exec("python showimg.py");
            if(false){
                throw new IOException();
            }
        }
        catch(IOException e){
            e.printStackTrace();
        }
        for(Double[] z: arr){
            System.out.println(Arrays.toString(z));
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EigenDisplayGUI(arr,edgesAdded).setVisible(true);
            }
        });
       
    }//GEN-LAST:event_RunButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea AdjInput;
    private javax.swing.JButton AlgorithmType;
    private javax.swing.JTextField EdgesInput;
    private javax.swing.JButton RunButton;
    private javax.swing.JButton TypeButton;
    private javax.swing.JLabel jLabel;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
